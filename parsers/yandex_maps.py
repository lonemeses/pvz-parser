import datetime
import itertools
import json
import sys

from selenium import webdriver
from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import os
import urllib.parse

def loading_animation(text, duration=3):
    spinner = itertools.cycle(['‚†ã','‚†ô','‚†π','‚†∏','‚†º','‚†¥','‚†¶','‚†ß','‚†á','‚†è'])
    end_time = time.time() + duration
    while time.time() < end_time:
        sys.stdout.write(f'\r{next(spinner)} {text}')
        sys.stdout.flush()
        time.sleep(0.1)
    print('\r‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ'.ljust(50))

def scroll_until_all_working(driver, max_closed_in_row=5, max_idle_scrolls=3):
    def log_inline(text, icon="üîç"):
        print(f"\r{icon} {text}...", end='')
        sys.stdout.flush()

    def log_final(text, icon="‚úÖ"):
        print(f"\r{icon} {text}".ljust(50))

    try:
        scroll_container = driver.execute_script(
            "return document.querySelector('div.scroll__container')?.parentElement"
        )

        if not scroll_container:
            log_final("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", "‚ùå")
            return

        log_inline("–ò—â–µ–º –ø—É–Ω–∫—Ç—ã –≤—ã–¥–∞—á–∏", "üîç")
        closed_in_row = 0
        same_count_scrolls = 0
        prev_count = 0

        while True:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ item'—ã
            items = driver.find_elements(By.CSS_SELECTOR, 'li.search-snippet-view')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
            new_closed = 0
            for el in items[-10:]:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
                try:
                    status = el.find_element(By.CLASS_NAME, 'business-working-status-view').text
                    if status.strip() == '–ë–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç':
                        new_closed += 1
                except Exception:
                    continue

            if new_closed >= max_closed_in_row:
                log_final(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {new_closed} –∑–∞–∫—Ä—ã—Ç—ã—Ö –ü–í–ó –ø–æ–¥—Ä—è–¥. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è", "‚õî")
                break

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –Ω–µ —Ä–∞—Å—Ç—ë—Ç)
            current_count = len(items)
            if current_count == prev_count:
                same_count_scrolls += 1
                log_inline(f"–ù–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç ({current_count}) [{same_count_scrolls}/{max_idle_scrolls}]", "‚ö†Ô∏è")
                if same_count_scrolls >= max_idle_scrolls:
                    log_final("–°–ø–∏—Å–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", "‚úÖ")
                    break
            else:
                same_count_scrolls = 0
                prev_count = current_count
                log_inline(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {current_count}")

            # –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
            driver.execute_script(
                "document.querySelector('div.scroll__container').scrollTop += 1000;"
            )
            time.sleep(1.2)

    except Exception as e:
        log_final(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–µ: {e}", "‚ùå")


def get_places(query: str, city: str):
    def log_inline(text, icon="üåç"):
        print(f"\r{icon} {text}", end='')
        sys.stdout.flush()

    def log_final(text, icon="‚úÖ"):
        print(f"\r{icon} {text}".ljust(50))

    global places
    options = webdriver.ChromeOptions()
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)...")
    options.add_argument("--log-level=3")
    driver = webdriver.Chrome(options=options)
    driver.get("https://yandex.ru/maps/")


    try:
        search_input = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, '//input[contains(@class,"input__control")]'))
        )
        search_input.send_keys(query)
        search_input.submit()


        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, 'li.search-snippet-view'))
        )

        # –°–∫—Ä–æ–ª–ª
        # try:
        #     scroll_container = driver.execute_script(
        #         "return document.querySelector('div.scroll__container')?.parentElement"
        #     )
        #
        #     if scroll_container:
        #         last_count = -1
        #         for _ in range(1):
        #             driver.execute_script(
        #                 "document.querySelector('div.scroll__container').scrollTop += 1500;"
        #             )
        #             time.sleep(1)
        #             items = driver.find_elements(By.CSS_SELECTOR, 'li.search-snippet-view')
        #             if len(items) == last_count:
        #                 break
        #             last_count = len(items)
        # except Exception as e:
        #     print("‚ö† –ü—Ä–æ–ø—É—â–µ–Ω —Å–∫—Ä–æ–ª–ª–∏–Ω–≥: —Å–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        scroll_until_all_working(driver)

        # –°–±–æ—Ä
        places = []
        for el in driver.find_elements(By.CSS_SELECTOR, 'li.search-snippet-view'):
            try:
                name = el.find_element(By.CLASS_NAME, 'search-business-snippet-view__title').text
                address = el.find_element(By.CLASS_NAME, 'search-business-snippet-view__address').text
                working_status = el.find_element(By.CLASS_NAME, 'business-working-status-view').text
                if working_status == '–ë–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç':
                    continue


                places.append({
                    "id": len(places) + 1,
                    "name": name,
                    "address": address,
                })
            except Exception:
                continue

        try:
            for item in places:
                try:
                    address = f"{item['address']}, {city}"
                    log_inline(f"–ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è: {address}")

                    # –ù–∞–π–¥–∏ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ –∑–∞–Ω–æ–≤–æ (–µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç—Å—è ‚Äî —Å—Ç–∞—Ä—ã–π —É–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
                    search_input = WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, "input.input__control"))
                    )

                    # –û—á–∏—Å—Ç–∏ —á–µ—Ä–µ–∑ Ctrl+A + Backspace
                    search_input.send_keys(Keys.CONTROL + 'a')
                    search_input.send_keys(Keys.BACKSPACE)

                    # –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                    search_input.send_keys(address)
                    search_input.send_keys(Keys.ENTER)
                    time.sleep(1)

                    # –ñ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    WebDriverWait(driver, 10).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, 'div.toponym-card-title-view__coords-badge'))
                    )

                    coords = driver.find_element(By.CSS_SELECTOR, 'div.toponym-card-title-view__coords-badge').text
                    item['coords'] = coords
                    log_final(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords}")


                except Exception as e:
                    log_final(f"–û—à–∏–±–∫–∞ –¥–ª—è {item['address']}: {e}", "‚ùå")
        except Exception as e:
            print('coord error')
    finally:

        driver.quit()

        export = input('–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ JSON?(y/n): ')

        if export.lower() == 'y':

            now = datetime.datetime.now()

            filename = f"./{now.date()}_{now.time().strftime('%H-%M-%S')}.json"


            with open(filename, "w", encoding="utf-8") as f:

                json.dump(places, f, ensure_ascii=False, indent=2)

            print(f'–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {filename}')

        else:

            print()

    return places